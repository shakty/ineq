<!doctype html>
<title>Ineq</title>
<link rel="stylesheet" href="/lib/bootstrap/bootstrap.min.css" />
<script src="js/plotly.js"></script>
<script src="js/jstat.js"></script>
<style>
  /* Hide PlotLy Toolbar
  .modebar {
    display: none !important;
  } */
</style>
<body>
  <div id="container" style="margin: 50px auto; max-width: 42em; font-size: 20px">
    <div id="myDiv" style="width:700px; height:700px;"></div>
  </div>
</body>
<script>
  window.onload = function() {
      var node = parent.node;
      var W = parent.W;
      var J = parent.J;

      // TODO: check vars/globals in Production.
      //////////////////////////////////////////

      // Settings.
      ////////////

      // X axis of all distributions.
      var left = 1;
      var right = 100;
      
      var nPoints = 100;
      var x = jStat.seq(left, right, nPoints);
      
      // Income and Poverty distribution.
      var incomeMean = 100;
      var incomeSd = 50;
      
      var povertyLevel = 0.1;

      // Talent distribution.
      var talentMean = 1;
      var talentSd = 50;

      // Type of mapping between income and talent.
      var mapType = 'RANDOM';

      // Var iniatialized later.

      // Plotly traces.
      var income, povertyLine, talent;

      // Normal distribution generator.
      var ynorm;

      // Y axis values.
      var yIncome, yPoverty, yTalent;

      // Maps.
      var maps, mapIncome2Talent, mapTalent2Income;

      // Plotly params.
      var data, layout, config;

      // Div containing the plot.
      var myPlot;
      
      // Create map.
      //////////////

      function createMaps(mapType) {
          var i, t, tmp;
          var mapIncome2Talent = new Array(nPoints);
          var mapTalent2Income = new Array(nPoints);
          if (mapType === 'RANDOM') {
              mapIncome2Talent = J.shuffle(x);
              for (i = 0; i < nPoints; i++) {
                  mapTalent2Income[mapIncome2Talent[i]] = i;
              }
          }
          else {
              throw new Error('Unknown map type :' + mapType);
          }
          return {
              mapIncome2Talent: mapIncome2Talent,
              mapTalent2Income: mapTalent2Income
          };
      }

      maps = createMaps(mapType);
      mapIncome2Talent = maps.mapIncome2Talent;
      mapTalent2Income = maps.mapTalent2Income;

      // Setup Plotly Lines.
      ////////////////

      // Income & Povery Line.

      jnorm = jStat.normal(incomeMean, incomeSd);
      yIncome = jnorm.pdf(x)[0];
      yPoverty = J.rep([povertyLevel]);

      income = {
          x: x,
          y: yIncome,
          name: 'Income',
          mode: 'lines',
          line: {
              color: 'rgb(219, 64, 82)',
              width: 6
          }
      };
      povertyLine = {
          x: x,
          y: yPoverty,
          name: 'Poverty Line',
          mode: 'lines',
          line: {
              dash: 'dashdot',
              color: 'rgb(55, 128, 191)',
              width: 8
          }
      };

      // Talent.

      jnorm = jStat.normal(0, 1);
      yTalent = jnorm.pdf(x)[0];

      talent = {
          x: x,
          y: yTalent,
          name: 'Talent',
          mode: 'lines',
          line: {
              color: '#000',
              width: 6
          },
          xaxis: 'x2',
          yaxis: 'y2'
      };

      data = [ income, povertyLine, talent ];

      layout = {
          title: 'Income Distribution and Povery Line',
         // legend: {
         //     x: 0.2,
         //     y: 0.9,
         //     traceorder: 'reversed',
         //     font: {size: 16},
         //     yref: 'paper'
         // },
          xaxis: {
              title: 'People with given income',
              hoverformat: '.2r'
              // range: [0.75, 5.25],
              // autorange: false
          },
          yaxis: {
              title: 'Income Share (%) of Total',
              domain: [0.55, 1],
              hoverformat: '.2r'
          },

          yaxis2: {
              domain: [0, 0.45],
              hoverformat: '.2r'
          },
          xaxis2: {
              anchor: 'y2',
              title: 'Talent',
              // hoverformat: '.2r'
          },
          showLegend: false
      };

      config = {
          // editable: true,
          // scrollZoom: true,
          // staticPlot: true,
          displayModeBar: false,
          // showLink: true,
          // modeBarButtonsToRemove: ['toImage']
      };

      // Do Plot.

      myPlot = document.getElementById('myDiv');
      Plotly.newPlot(myPlot, data, layout, config);

      // Hovering.

      myPlot.on('plotly_hover', function(eventData){
          // console.log(eventData);

          var incomePoint, talentPoint;
          if (eventData.points[0].curveNumber == 0) {
              incomePoint = eventData.points[0].pointNumber;
              talentPoint = mapIncome2Talent[incomePoint];
          }
          else {
              talentPoint = eventData.points[0].pointNumber;
              incomePoint = mapIncome2Talent[talentPoint];
          }
          Plotly.Fx.hover(myPlot, [
              { curveNumber: 0, pointNumber: incomePoint },
              { curveNumber: 2, pointNumber: talentPoint }
          ], ['xy', 'x2y2']);
      });

  };
</script>
